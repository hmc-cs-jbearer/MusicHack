{
  "rules": {
      
    "networks": {
      
      // Only logged in users can see networks
      ".read" : "auth.uid != null && auth.uid != undefined",
      
      // The networks key itself is static, only specific netwoks can be written if the user has the right permissions
      //".write" : false,
      
      "$network" : {
        
        // A user must be a member of a network to read
        ".read" : "data.child('users').hasChild(auth.uid)",
        
        // A user must be an admin of a network to write, except where explicity overridden
        // EDIT: for now, new users can add themselves without admin's approval.  We should change this feature.
        //".write" : "!data.hasChild('admins') ||
        //  (data.child('admins').hasChild(auth.uid))",
                    
          
        // Network doesn't exist, and input has admins, or network does exist and input has users 
        ".validate" : 
          "(!data.exists() && newData.hasChild('admins')) ||
          (data.exists() && newData.hasChild('users'))",
          
        "users" : {
          "$user" : {
            // A user can edit their own data, or an admin can add or remove a user
            ".write" : "$user == auth.uid || !data.exists() || !newData.exists()"
          }
        },
        
        "admins" : {
          "$admin" : {
             // An admin can edit their own data and add a new admin
            ".write" : "$admin == auth.uid || (!data.exists())"
          }
        },
        
        "queue" : {
          // Any user can edit the queue
          ".write" : "data.parent().child('users').hasChild(auth.uid)",
          
          "front" : {
            // Front must point to a song in the queue 
            ".validate" : "newData.parent().hasChild(newData.val())"
          },
          
          "back" : {
            // Back must point to a song in the queue, and the back song can have no next song
            ".validate" : "newData.parent().hasChild(newData.val()) && !newData.parent().child(newData.val()).hasChild('next')"
          },
          
          "$song_id" : {
            ".validate" : "newData.hasChild('data') && newData.hasChild('requester')",
            
            "data" : {
              ".validate" : "newData.hasChild('name') && newData.hasChild('artist_name') && newData.hasChild('album_name') && newData.hasChild('image_url')"
            },
            
            "requester" : {
              // The requester of the song must be the ID of a user in the network
              ".validate" : "root.child('networks/$network/users').hasChild(newData.val())"
            },
            
            "next" : {
              // Net must point to a song in the queue
              ".validate": "newData.parent().parent().hasChild(newData.val())"
            }
            
          }
        }
      }
    },
    
    "users": {
      
      "$user" : {

        // Any user can read all of their own data
        ".read" : "auth.uid == $user",

        // A user can add themselves as a user, or delete their account
        ".write" : "auth.uid == $user && (!data.exists() || !newData.exists())",

        // A new user can add themselves
        ".validate" : "!newData.exists() || newData.hasChildren(['networks', 'name', 'username'])",

        "name": {
          // A user can always edit their name
          ".write": "auth.uid == $user",

          ".validate": "newData.isString()"
        },

        "username": {
          /// \todo Allow writes but ensure uniqueness. For now, disallow
          /// changes to the username
          ".write": "false"
        },
          
        "networks" : {
          "$network" : {

            // A user can add themselves to networks or remove themselves
            ".write": "auth.uid == $user && (!data.exists() || !newData.exists())",

            // Users get 5 coins upon joining a new network
            ".validate": "!newData.exists() || 
              (newData.hasChild('coins') && newData.child('coins').val() == 5)"
          }
        }
       
      }
      
    } 
      
  }
}
